AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for Phonebook Application. This template creates Application Load Balancer with Auto Scaling Group of Amazon Linux 2 "ami-04e5276ebb8451442" EC2 Instances which host Python Flask Web Application. EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup, and allows tcp(3306) connections only within itself. RDS DB instance is placed within WebServerSecurityGroup so that Database Server can communicate with Web Servers. Application Load Balancer is placed within ALBSecurityGroup which allows http (80) connections from anywhere. WebServerASG Auto Scaling Group is using the WebServerLT Launch Template in order to spin up instances needed. WebServerLT Launch Template is configured to prepare Python Flask environment on EC2, and to deploy Phonebook Application on Flask Server after downloading the app code from Github repository.

Parameters:
  MyVPC:
    Description: Select your VPC
    Type: AWS::EC2::VPC::Id
    
  KeyName:
    Description: Selecy your Key Pair
    Type: AWS::EC2::KeyPair::KeyName

  Subnets:
    Description: Select at least 2 subnets
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables HTTP for Application Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ALB Security Group of ${AWS::StackName} Stack
      VpcId: !Ref MyVPC

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables HTTP for Flask Web Server and SSH for getting into EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub Web Server Security Group of ${AWS::StackName} Stack
      VpcId: !Ref MyVPC

  WebServerLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-04e5276ebb8451442
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName} Stack
        UserData:
          Fn::Base64:
            !Sub 
              - |
                #! /bin/bash
                yum update -y
                exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                yum update -y
                yum install -y python3 git
                yum install python3-pip -y
                pip3 install flask==2.2.* Werkzeug==2.2.* Flask-MySQL==1.5.* PyMySQL==1.1.*
                touch /home/ec2-user/dbserver.endpoint
                chmod 777 /home/ec2-user/dbserver.endpoint
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                TOKEN='XXXXXXXXXXXXXXXXXXXXX' 
                git clone https://$TOKEN@github.com/Abra7am/cloud-test.git /home/ec2-user/cloud-test
                python3 /home/ec2-user/cloud-test/phonebook-app.py
              - MyDBURI: !GetAtt MyDatabaseServer.Endpoint.Address
  WebServerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyVPC

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref WebServerTG
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  WebServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      HealthCheckGracePeriod: 180
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber
      MaxSize: 2
      MinSize: 1
      TargetGroupARNs:
        - !Ref WebServerTG
      VPCZoneIdentifier: !Ref Subnets

  MyDBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !GetAtt  WebServerSecurityGroup.GroupId
      EC2VpcId: !Ref MyVPC
      GroupDescription: Back-end Database # Required

  MyDatabaseServer:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0 # disable backups to create DB faster
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: finale
      DBName: claruswaycfn #as per python file!
      DBSecurityGroups:
        - !Ref MyDBSecurityGroup
      Engine: MySQL
      EngineVersion: 8.0.28
      MasterUsername: abraham #as per python file!
      MasterUserPassword: abradevops #as per python file!
      Port: 3306 #in db security group it opens port no:3306, and
      PubliclyAccessible: true
      DeleteAutomatedBackups: true
      DeletionProtection: false
      VPCSecurityGroups:
        - !Ref MyDBSecurityGroup

   
Outputs:
  WebsiteURL:
    Value: !Sub
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ApplicationLoadBalancer.DNSName
    Description: Phonebook Application Load Balancer URL



